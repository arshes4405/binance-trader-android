// ÏàòÏ†ïÎêú AdvancedCciStrategyScreen.kt - Ïã§Ï†ú Ï†ÑÎûµÏóê ÎßûÍ≤å ÏóÖÎç∞Ïù¥Ìä∏

package com.example.ver20.view

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.text.DecimalFormat
import com.example.ver20.dao.CciStrategySettings
import com.example.ver20.dao.RealCciBacktestResult
import com.example.ver20.dao.RealCciStrategyEngine

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AdvancedCciStrategyScreen(
    onBackClick: () -> Unit
) {
    var settings by remember { mutableStateOf(CciStrategySettings()) }
    var isRunning by remember { mutableStateOf(false) }
    var showResults by remember { mutableStateOf(false) }
    var backtestResult by remember { mutableStateOf<RealCciBacktestResult?>(null) }
    var showPositionHistory by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf<String?>(null) }

    val realCciEngine = remember { RealCciStrategyEngine() }

    // ÏÑ§Ï†ï Î≥ÄÍ≤Ω Ìï®Ïàò
    fun onSettingsChange(newSettings: CciStrategySettings) {
        settings = newSettings
    }

    // Ìè¨ÏßÄÏÖò ÎÇ¥Ïó≠ ÌôîÎ©¥ ÌëúÏãú
    if (showPositionHistory && backtestResult != null) {
        RealCciPositionHistoryScreen(
            backtestResult = backtestResult!!,
            onBackClick = { showPositionHistory = false }
        )
    } else {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            "üéØ Ïã§Ï†ú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ",
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = onBackClick) {
                            Icon(
                                Icons.Default.ArrowBack,
                                contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞",
                                tint = Color.White
                            )
                        }
                    },
                    actions = {
                        IconButton(onClick = { settings = CciStrategySettings() }) {
                            Icon(
                                Icons.Default.Refresh,
                                contentDescription = "ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî",
                                tint = Color.White
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = Color(0xFF2196F3)
                    )
                )
            }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(16.dp)
                    .verticalScroll(rememberScrollState())
            ) {
                // Ïã§Ï†ú Ï†ÑÎûµ ÏÑ§Î™Ö Ïπ¥Îìú
                RealCciStrategyExplanationCard()

                Spacer(modifier = Modifier.height(16.dp))

                // CCI ÏÑ§Ï†ï Ïπ¥Îìú
                CciConfigurationCard(settings = settings, onSettingsChange = ::onSettingsChange)

                Spacer(modifier = Modifier.height(16.dp))

                // Í∏∞Î≥∏ ÏÑ§Ï†ï Ïπ¥Îìú
                BasicSettingsCard(settings = settings, onSettingsChange = ::onSettingsChange)

                Spacer(modifier = Modifier.height(16.dp))

                // Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ ÏÑ§Î™Ö Ïπ¥Îìú
                RealAveragingDownStrategyCard()

                Spacer(modifier = Modifier.height(16.dp))

                // ÏÜêÏùµÏ†à ÏÑ§Ï†ï Ïπ¥Îìú
                ProfitLossSettingsCard(settings = settings, onSettingsChange = ::onSettingsChange)

                Spacer(modifier = Modifier.height(16.dp))

                // Ïã§Ìñâ Ïª®Ìä∏Î°§
                RealBacktestExecutionCard(
                    isRunning = isRunning,
                    onStart = {
                        isRunning = true
                        showResults = false
                        errorMessage = null

                        CoroutineScope(Dispatchers.Main).launch {
                            try {
                                backtestResult = realCciEngine.runRealCciBacktest(settings)
                                isRunning = false
                                showResults = true
                            } catch (e: Exception) {
                                isRunning = false
                                errorMessage = e.message
                            }
                        }
                    },
                    onStop = {
                        isRunning = false
                        showResults = false
                    }
                )

                if (isRunning) {
                    Spacer(modifier = Modifier.height(16.dp))
                    RealBacktestProgressCard()
                }

                if (errorMessage != null) {
                    Spacer(modifier = Modifier.height(16.dp))
                    ErrorCard(errorMessage = errorMessage!!)
                }

                if (showResults && backtestResult != null) {
                    Spacer(modifier = Modifier.height(16.dp))
                    RealBacktestResultCard(
                        result = backtestResult!!,
                        onShowPositionHistory = { showPositionHistory = true }
                    )
                }

                // ÌïòÎã® Ïó¨Î∞±
                Spacer(modifier = Modifier.height(100.dp))
            }
        }
    }
}

@Composable
fun RealCciStrategyExplanationCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFE3F2FD)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    Icons.Default.TrendingUp,
                    contentDescription = null,
                    tint = Color(0xFF2196F3),
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    "üìà Ïã§Ï†ú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ (ÏóÖÎ°úÎìúÎêú Ï†ÑÎûµ)",
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1976D2)
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                "üìã ÌïµÏã¨ Í∑úÏπô:\n" +
                        "‚Ä¢ CCI Í∏∏Ïù¥: Í∏∞Î≥∏ 20 (ÏÑ§Ï†ï Í∞ÄÎä•)\n" +
                        "‚Ä¢ ÏßÑÏûÖ: CCI -110 Îö´Í≥† -100 ÌöåÎ≥µÏãú Î°±, +110 Îö´Í≥† +100 ÌöåÎ≥µÏãú Ïàè\n" +
                        "‚Ä¢ ÏãúÎìúÎ®∏ÎãàÏùò 20%Î°ú ÏãúÏûë\n\n" +
                        "üí∞ Î°± Î¨ºÌÉÄÍ∏∞ ÏãúÏä§ÌÖú:\n" +
                        "‚Ä¢ 1Îã®Í≥Ñ: Ï≤´ ÏßÑÏûÖ ‚Üí ÏùµÏ†à Ïãú Ï†ÑÏï°Îß§ÎèÑ or 2% ÏÜêÏã§Ïãú ÌòÑÏû¨Î¨ºÎüâÎßåÌÅº Ï∂îÍ∞ÄÎß§Ïàò\n" +
                        "‚Ä¢ 2Îã®Í≥Ñ: 0.5% ÏàòÏùµÏãú Ï†àÎ∞òÎß§ÎèÑ or 4% ÏÜêÏã§Ïãú ÌòÑÏû¨Î¨ºÎüâÎßåÌÅº Ï∂îÍ∞ÄÎß§Ïàò\n" +
                        "‚Ä¢ 3Îã®Í≥Ñ: 0.5% ÏàòÏùµÏãú Ï†àÎ∞òÎß§ÎèÑ or 8% ÏÜêÏã§Ïãú ÌòÑÏû¨Î¨ºÎüâÎßåÌÅº Ï∂îÍ∞ÄÎß§Ïàò\n" +
                        "‚Ä¢ 4Îã®Í≥Ñ: 0.5% ÏàòÏùµÏãú Ï†àÎ∞òÎß§ÎèÑ or 10% ÏÜêÏã§Ïãú ÏÜêÏ†à\n\n" +
                        "üî¥ Ïàè Ï†ÑÎûµ:\n" +
                        "‚Ä¢ Î¨ºÌÉÄÍ∏∞ ÏóÜÏùå, ÏÜêÏùµÏ†à ÌçºÏÑºÌä∏Î°úÎßå Ï≤≠ÏÇ∞",
                fontSize = 13.sp,
                color = Color(0xFF1565C0),
                lineHeight = 18.sp
            )
        }
    }
}

@Composable
fun CciConfigurationCard(
    settings: CciStrategySettings,
    onSettingsChange: (CciStrategySettings) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFF3E5F5)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                "‚öôÔ∏è CCI ÏÑ§Ï†ï",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF7B1FA2)
            )

            Spacer(modifier = Modifier.height(16.dp))

            // CCI Í∏∏Ïù¥ ÏÑ§Ï†ï
            Text(
                "CCI Í∏∏Ïù¥: ${settings.cciLength}",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF6A1B9A)
            )
            Slider(
                value = settings.cciLength.toFloat(),
                onValueChange = {
                    onSettingsChange(settings.copy(cciLength = it.toInt()))
                },
                valueRange = 14f..30f,
                steps = 15,
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFF9C27B0),
                    activeTrackColor = Color(0xFF9C27B0)
                )
            )

            Spacer(modifier = Modifier.height(12.dp))

            // CCI ÏûÑÍ≥ÑÍ∞í ÏÑ§Ï†ï
            Text(
                "CCI ÏßÑÏûÖ ÏûÑÍ≥ÑÍ∞í: ¬±${settings.entryThreshold}",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF6A1B9A)
            )
            Slider(
                value = settings.entryThreshold.toFloat(),
                onValueChange = {
                    onSettingsChange(settings.copy(entryThreshold = it.toInt()))
                },
                valueRange = 100f..150f,
                steps = 49,
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFF9C27B0),
                    activeTrackColor = Color(0xFF9C27B0)
                )
            )

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                "CCI Ï≤≠ÏÇ∞ ÏûÑÍ≥ÑÍ∞í: ¬±${settings.exitThreshold}",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF6A1B9A)
            )
            Slider(
                value = settings.exitThreshold.toFloat(),
                onValueChange = {
                    onSettingsChange(settings.copy(exitThreshold = it.toInt()))
                },
                valueRange = 80f..120f,
                steps = 39,
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFF9C27B0),
                    activeTrackColor = Color(0xFF9C27B0)
                )
            )
        }
    }
}

@Composable
fun BasicSettingsCard(
    settings: CciStrategySettings,
    onSettingsChange: (CciStrategySettings) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFE8F5E8)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                "üìä Í∏∞Î≥∏ ÏÑ§Ï†ï",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF2E7D32)
            )

            Spacer(modifier = Modifier.height(16.dp))

            // ÏãúÍ∞ÑÌîÑÎ†àÏûÑ ÏÑ†ÌÉù
            Text(
                "ÏãúÍ∞ÑÌîÑÎ†àÏûÑ:",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF388E3C)
            )
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                val timeframes = listOf("1ÏãúÍ∞Ñ", "4ÏãúÍ∞Ñ")
                timeframes.forEach { timeframe ->
                    FilterChip(
                        onClick = { onSettingsChange(settings.copy(timeframe = timeframe)) },
                        label = { Text(timeframe, fontSize = 12.sp) },
                        selected = settings.timeframe == timeframe,
                        colors = FilterChipDefaults.filterChipColors(
                            selectedContainerColor = Color(0xFF4CAF50),
                            selectedLabelColor = Color.White
                        )
                    )
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // ÏΩîÏù∏ ÏÑ†ÌÉù
            Text(
                "Í±∞Îûò ÏΩîÏù∏:",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF388E3C)
            )
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                val symbols = listOf("BTCUSDT", "ETHUSDT", "BNBUSDT", "ADAUSDT")
                symbols.forEach { symbol ->
                    FilterChip(
                        onClick = {
                            onSettingsChange(settings.copy(
                                symbol = symbol,
                                startAmount = settings.seedMoney * 0.2
                            ))
                        },
                        label = { Text(symbol.replace("USDT", ""), fontSize = 12.sp) },
                        selected = settings.symbol == symbol,
                        colors = FilterChipDefaults.filterChipColors(
                            selectedContainerColor = Color(0xFF4CAF50),
                            selectedLabelColor = Color.White
                        )
                    )
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // ÏãúÎìúÎ®∏Îãà ÏÑ§Ï†ï
            Text(
                "ÏãúÎìúÎ®∏Îãà: ${DecimalFormat("#,###").format(settings.seedMoney)}",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF388E3C)
            )
            Text(
                "ÏãúÏûëÍ∏àÏï°: ${DecimalFormat("#,###").format(settings.startAmount)} (ÏãúÎìúÎ®∏ÎãàÏùò 20%)",
                fontSize = 12.sp,
                color = Color(0xFF795548)
            )
            Slider(
                value = settings.seedMoney.toFloat(),
                onValueChange = {
                    val newSeedMoney = it.toDouble()
                    onSettingsChange(settings.copy(
                        seedMoney = newSeedMoney,
                        startAmount = newSeedMoney * 0.2
                    ))
                },
                valueRange = 1000f..100000f,
                steps = 99,
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFF4CAF50),
                    activeTrackColor = Color(0xFF4CAF50)
                )
            )

            Spacer(modifier = Modifier.height(12.dp))

            // Î∞±ÌÖåÏä§ÌåÖ Í∏∞Í∞Ñ
            Text(
                "Î∞±ÌÖåÏä§ÌåÖ Í∏∞Í∞Ñ:",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF388E3C)
            )
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                val periods = listOf("1Ï£ºÏùº", "3Í∞úÏõî", "6Í∞úÏõî", "1ÎÖÑ")
                periods.forEach { period ->
                    FilterChip(
                        onClick = { onSettingsChange(settings.copy(testPeriod = period)) },
                        label = { Text(period, fontSize = 12.sp) },
                        selected = settings.testPeriod == period,
                        colors = FilterChipDefaults.filterChipColors(
                            selectedContainerColor = Color(0xFF4CAF50),
                            selectedLabelColor = Color.White
                        )
                    )
                }
            }
        }
    }
}

@Composable
fun RealAveragingDownStrategyCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFFF3E0)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                "üìä Ïã§Ï†ú Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ ÏÉÅÏÑ∏",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFE65100)
            )

            Spacer(modifier = Modifier.height(12.dp))

            val stages = listOf(
                "1Îã®Í≥Ñ (0‚Üí1)" to "ÌèâÍ∑†Îã®Í∞Ä ÎåÄÎπÑ 2% ÏÜêÏã§ ‚Üí ÌòÑÏû¨Î¨ºÎüâÎßåÌÅº Ï∂îÍ∞ÄÎß§Ïàò ‚Üí ÏùµÏ†àÏãú Ï†ÑÏï°Îß§ÎèÑ",
                "2Îã®Í≥Ñ (1‚Üí2)" to "ÌèâÍ∑†Îã®Í∞Ä ÎåÄÎπÑ 4% ÏÜêÏã§ ‚Üí ÌòÑÏû¨Î¨ºÎüâÎßåÌÅº Ï∂îÍ∞ÄÎß§Ïàò ‚Üí 0.5% ÏàòÏùµÏãú Ï†àÎ∞òÎß§ÎèÑ",
                "3Îã®Í≥Ñ (2‚Üí3)" to "ÌèâÍ∑†Îã®Í∞Ä ÎåÄÎπÑ 8% ÏÜêÏã§ ‚Üí ÌòÑÏû¨Î¨ºÎüâÎßåÌÅº Ï∂îÍ∞ÄÎß§Ïàò ‚Üí 0.5% ÏàòÏùµÏãú Ï†àÎ∞òÎß§ÎèÑ",
                "4Îã®Í≥Ñ ÏÜêÏ†à" to "ÌèâÍ∑†Îã®Í∞Ä ÎåÄÎπÑ 10% ÏÜêÏã§ ‚Üí Ï†ÑÎüâ ÏÜêÏ†à (Îçî Ïù¥ÏÉÅ Î¨ºÌÉÄÍ∏∞ ÏóÜÏùå)"
            )

            stages.forEach { (stage, description) ->
                Card(
                    modifier = Modifier.fillMaxWidth(),
                    colors = CardDefaults.cardColors(
                        containerColor = Color.White
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(12.dp)
                    ) {
                        Text(
                            stage,
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFFE65100)
                        )
                        Text(
                            description,
                            fontSize = 12.sp,
                            color = Color(0xFFBF360C),
                            lineHeight = 16.sp
                        )
                    }
                }
                Spacer(modifier = Modifier.height(8.dp))
            }

            Card(
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFFFEBEE)
                )
            ) {
                Column(
                    modifier = Modifier.padding(12.dp)
                ) {
                    Text(
                        "üî¥ Ïàè Ï†ÑÎûµ:",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFFF44336)
                    )
                    Text(
                        "Î¨ºÌÉÄÍ∏∞ ÏóÜÏùå. ÏÑ§Ï†ïÎêú ÏÜêÏùµÏ†à ÌçºÏÑºÌä∏Î°úÎßå Ï≤≠ÏÇ∞",
                        fontSize = 11.sp,
                        color = Color(0xFFD32F2F)
                    )
                }
            }
        }
    }
}

@Composable
fun ProfitLossSettingsCard(
    settings: CciStrategySettings,
    onSettingsChange: (CciStrategySettings) -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFFEBEE)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                "üí∞ ÏÜêÏùµÏ†à ÏÑ§Ï†ï",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFFC62828)
            )

            Spacer(modifier = Modifier.height(16.dp))

            // 1Îã®Í≥Ñ ÏùµÏ†àÎ•†
            Text(
                "1Îã®Í≥Ñ ÏùµÏ†àÎ•†: ${settings.profitTarget}%",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFFD32F2F)
            )
            Slider(
                value = settings.profitTarget.toFloat(),
                onValueChange = {
                    onSettingsChange(settings.copy(profitTarget = it.toDouble()))
                },
                valueRange = 0.5f..10f,
                steps = 18, // 0.5% Îã®ÏúÑ
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFFF44336),
                    activeTrackColor = Color(0xFFF44336)
                )
            )

            Spacer(modifier = Modifier.height(12.dp))

            // Ï†àÎ∞òÎß§ÎèÑ ÏàòÏùµÎ•†
            Text(
                "Ï†àÎ∞òÎß§ÎèÑ ÏàòÏùµÎ•†: ${settings.halfSellProfit}%",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFFD32F2F)
            )
            Slider(
                value = settings.halfSellProfit.toFloat(),
                onValueChange = {
                    onSettingsChange(settings.copy(halfSellProfit = it.toDouble()))
                },
                valueRange = 0.5f..3f,
                steps = 4, // 0.5% Îã®ÏúÑ
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFFF44336),
                    activeTrackColor = Color(0xFFF44336)
                )
            )

            Spacer(modifier = Modifier.height(12.dp))

            // ÏµúÏ¢Ö ÏÜêÏ†àÎ•†
            Text(
                "ÏµúÏ¢Ö ÏÜêÏ†àÎ•†: ${settings.stopLossPercent}%",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFFD32F2F)
            )
            Slider(
                value = settings.stopLossPercent.toFloat(),
                onValueChange = {
                    onSettingsChange(settings.copy(stopLossPercent = it.toDouble()))
                },
                valueRange = 5f..20f,
                steps = 29, // 0.5% Îã®ÏúÑ
                colors = SliderDefaults.colors(
                    thumbColor = Color(0xFFF44336),
                    activeTrackColor = Color(0xFFF44336)
                )
            )
        }
    }
}

@Composable
fun RealBacktestExecutionCard(
    isRunning: Boolean,
    onStart: () -> Unit,
    onStop: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFE1F5FE)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                "üöÄ Ïã§Ï†ú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ Ïã§Ìñâ",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(16.dp))

            if (isRunning) {
                Button(
                    onClick = onStop,
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFFF44336)
                    ),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(Icons.Default.Stop, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Î∞±ÌÖåÏä§ÌåÖ Ï§ëÏßÄ", fontWeight = FontWeight.Bold)
                }
            } else {
                Button(
                    onClick = onStart,
                    colors = ButtonDefaults.buttonColors(
                        containerColor = Color(0xFF4CAF50)
                    ),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Icon(Icons.Default.PlayArrow, contentDescription = null)
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Ïã§Ï†ú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ ÏãúÏûë", fontWeight = FontWeight.Bold)
                }
            }
        }
    }
}

@Composable
fun RealBacktestProgressCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFE1F5FE)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            CircularProgressIndicator(color = Color(0xFF2196F3))
            Spacer(modifier = Modifier.height(12.dp))
            Text(
                "Ïã§Ï†ú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ Î∞±ÌÖåÏä§ÌåÖ ÏßÑÌñâ Ï§ë...",
                fontSize = 14.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF1976D2)
            )
            Text(
                "Î∞îÏù¥ÎÇ∏Ïä§ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú Ï†ïÌôïÌïú Î¨ºÌÉÄÍ∏∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï§ë",
                fontSize = 12.sp,
                color = Color(0xFF1565C0)
            )

            Spacer(modifier = Modifier.height(12.dp))

            Card(
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFF3E5F5)
                )
            ) {
                Column(
                    modifier = Modifier.padding(12.dp)
                ) {
                    Text(
                        "üìä Ïã§Ìñâ Îã®Í≥Ñ:",
                        fontSize = 12.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF7B1FA2)
                    )
                    Text(
                        "1Ô∏è‚É£ Î∞îÏù¥ÎÇ∏Ïä§ Ïã§Ï†ú Í∞ÄÍ≤© Îç∞Ïù¥ÌÑ∞ ÏàòÏßë\n" +
                                "2Ô∏è‚É£ CCI ÏßÄÌëú Í≥ÑÏÇ∞ (ÏÑ§Ï†ïÎêú Í∏∏Ïù¥)\n" +
                                "3Ô∏è‚É£ Ïã§Ï†ú Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ ÏãúÎÆ¨Î†àÏù¥ÏÖò\n" +
                                "4Ô∏è‚É£ Ìè¨ÏßÄÏÖòÎ≥Ñ ÏàòÏùµÎ•† Î∂ÑÏÑù",
                        fontSize = 10.sp,
                        color = Color(0xFF8E24AA),
                        lineHeight = 14.sp
                    )
                }
            }
        }
    }
}

@Composable
fun ErrorCard(errorMessage: String) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFFEBEE)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    Icons.Default.Error,
                    contentDescription = null,
                    tint = Color(0xFFF44336),
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    "‚ùå Î∞±ÌÖåÏä§ÌåÖ Ïã§Ìñâ Ïò§Î•ò",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFC62828)
                )
            }

            Spacer(modifier = Modifier.height(12.dp))

            Text(
                errorMessage,
                fontSize = 12.sp,
                color = Color(0xFFD32F2F),
                lineHeight = 16.sp
            )
        }
    }
}

@Composable
fun RealBacktestResultCard(
    result: RealCciBacktestResult,
    onShowPositionHistory: () -> Unit
) {
    val formatter = DecimalFormat("#,##0.00")

    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFE8F5E8)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                "üìà Ïã§Ï†ú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ Í≤∞Í≥º",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF2E7D32)
            )

            Spacer(modifier = Modifier.height(16.dp))

            // ÌïµÏã¨ ÏÑ±Í≥º ÏßÄÌëú
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                ResultMetric("Ï¥ù ÏàòÏùµÎ•†", "+${formatter.format((result.finalSeedMoney/result.settings.seedMoney - 1) * 100)}%", Color(0xFF4CAF50))
                ResultMetric("ÏäπÎ•†", "${formatter.format(result.winRate)}%", Color(0xFF2196F3))
                ResultMetric("ÏµúÎåÄ ÏÜêÏã§", "${formatter.format(result.maxDrawdown)}%", Color(0xFFF44336))
            }

            Spacer(modifier = Modifier.height(16.dp))

            // ÏÉÅÏÑ∏ Í≤∞Í≥º
            val detailResults = mapOf(
                "Ï¥ù Ìè¨ÏßÄÏÖò Ïàò" to "${result.totalPositions}Í∞ú",
                "ÏôÑÎ£åÎêú Ìè¨ÏßÄÏÖò" to "${result.completedPositions}Í∞ú",
                "ÏäπÎ¶¨ Ìè¨ÏßÄÏÖò" to "${result.winningPositions}Í∞ú",
                "ÏÜêÏã§ Ìè¨ÏßÄÏÖò" to "${result.losingPositions}Í∞ú",
                "Ï¥ù Í±∞Îûò ÌöüÏàò" to "${result.totalTrades}Ìöå",
                "Ï¥ù ÏàòÏùµ" to "${formatter.format(result.totalProfit)}",
                "Ï¥ù ÏàòÏàòÎ£å" to "${formatter.format(result.totalFees)}",
                "ÏàòÏùµ Ìå©ÌÑ∞" to formatter.format(result.profitFactor),
                "ÌèâÍ∑† Î≥¥Ïú†ÏãúÍ∞Ñ" to "${formatter.format(result.avgHoldingTime)}ÏãúÍ∞Ñ",
                "ÏµúÎåÄ ÎèÑÎã¨Îã®Í≥Ñ" to "${result.maxStageReached}Îã®Í≥Ñ",
                "ÏµúÏ¢Ö ÏãúÎìúÎ®∏Îãà" to "${formatter.format(result.finalSeedMoney)}"
            )

            detailResults.forEach { (label, value) ->
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(
                        label,
                        fontSize = 13.sp,
                        color = Color(0xFF388E3C)
                    )
                    Text(
                        value,
                        fontSize = 13.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF2E7D32)
                    )
                }
                Spacer(modifier = Modifier.height(4.dp))
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Ïï°ÏÖò Î≤ÑÌäºÎì§
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                OutlinedButton(
                    onClick = onShowPositionHistory,
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.Assessment, contentDescription = null, modifier = Modifier.size(16.dp))
                    Spacer(modifier = Modifier.width(4.dp))
                    Text("Ìè¨ÏßÄÏÖòÎÇ¥Ïó≠", fontSize = 12.sp)
                }

                OutlinedButton(
                    onClick = { /* Í≤∞Í≥º Ï†ÄÏû• */ },
                    modifier = Modifier.weight(1f)
                ) {
                    Icon(Icons.Default.Save, contentDescription = null, modifier = Modifier.size(16.dp))
                    Spacer(modifier = Modifier.width(4.dp))
                    Text("Í≤∞Í≥ºÏ†ÄÏû•", fontSize = 12.sp)
                }
            }

            Spacer(modifier = Modifier.height(12.dp))

            // Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© ÌëúÏãú
            Card(
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFFE3F2FD)
                )
            ) {
                Row(
                    modifier = Modifier.padding(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        Icons.Default.CheckCircle,
                        contentDescription = null,
                        tint = Color(0xFF2196F3),
                        modifier = Modifier.size(16.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        "‚úÖ Ïã§Ï†ú Î∞îÏù¥ÎÇ∏Ïä§ Îç∞Ïù¥ÌÑ∞ + ÏóÖÎ°úÎìúÎêú CCI Î¨ºÌÉÄÍ∏∞ Ï†ÑÎûµ ÏôÑÏ†Ñ Íµ¨ÌòÑ",
                        fontSize = 11.sp,
                        fontWeight = FontWeight.Medium,
                        color = Color(0xFF1976D2)
                    )
                }
            }
        }
    }
}

@Composable
fun ResultMetric(label: String, value: String, color: Color) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            label,
            fontSize = 10.sp,
            color = Color.Gray,
            textAlign = TextAlign.Center
        )
        Text(
            value,
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold,
            color = color
        )
    }
}