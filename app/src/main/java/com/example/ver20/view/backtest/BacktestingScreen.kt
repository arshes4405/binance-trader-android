// BacktestingScreen.kt - Ï†ÑÎûµ Î™©Î°ù ÌôîÎ©¥

package com.example.ver20.view.backtest

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

// Ï†ÑÎûµ Îç∞Ïù¥ÌÑ∞ ÌÅ¥ÎûòÏä§
data class TradingStrategy(
    val id: String,
    val name: String,
    val description: String,
    val icon: ImageVector,
    val difficulty: String,
    val expectedReturn: String,
    val riskLevel: String,
    val timeframe: String
)

@Composable
fun BacktestingScreen(modifier: Modifier = Modifier) {
    var selectedStrategy by remember { mutableStateOf<TradingStrategy?>(null) }

    // Ï†ÑÎûµÏù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏïòÏúºÎ©¥ Î™©Î°ù ÌôîÎ©¥, ÏÑ†ÌÉùÎêòÏóàÏúºÎ©¥ ÏÉÅÏÑ∏ ÌôîÎ©¥
    if (selectedStrategy == null) {
        StrategyListScreen(
            modifier = modifier,
            onStrategySelected = { strategy ->
                selectedStrategy = strategy
            }
        )
    } else {
        StrategyDetailScreen(
            modifier = modifier,
            strategy = selectedStrategy!!,
            onBackClick = {
                selectedStrategy = null
            }
        )
    }
}

@Composable
private fun StrategyListScreen(
    modifier: Modifier,
    onStrategySelected: (TradingStrategy) -> Unit
) {
    val strategies = listOf(
        TradingStrategy(
            id = "cci",
            name = "CCI Ï†ÑÎûµ",
            description = "Commodity Channel IndexÎ•º ÌôúÏö©Ìïú Í≥ºÎß§Ïàò/Í≥ºÎß§ÎèÑ Ï†ÑÎûµ",
            icon = Icons.Default.TrendingUp,
            difficulty = "Ï§ëÍ∏â",
            expectedReturn = "15-25%",
            riskLevel = "Ï§ëÍ∞Ñ",
            timeframe = "4ÏãúÍ∞Ñ-1Ïùº"
        ),
        TradingStrategy(
            id = "rsi",
            name = "RSI Ï†ÑÎûµ",
            description = "Relative Strength Index Í∏∞Î∞ò Ïó≠Ï∂îÏÑ∏ Îß§Îß§ Ï†ÑÎûµ",
            icon = Icons.Default.Analytics,
            difficulty = "Ï¥àÍ∏â",
            expectedReturn = "10-20%",
            riskLevel = "ÎÇÆÏùå",
            timeframe = "1ÏãúÍ∞Ñ-4ÏãúÍ∞Ñ"
        ),
        TradingStrategy(
            id = "bollinger",
            name = "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú Ï†ÑÎûµ",
            description = "Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú ÏÉÅÌïòÌïúÏÑ† ÎèåÌåå/Î∞òÎì± Ï†ÑÎûµ",
            icon = Icons.Default.ShowChart,
            difficulty = "Ï§ëÍ∏â",
            expectedReturn = "12-22%",
            riskLevel = "Ï§ëÍ∞Ñ",
            timeframe = "1ÏãúÍ∞Ñ-1Ïùº"
        )
    )

    Card(
        modifier = modifier
            .fillMaxSize()
            .padding(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFE3F2FD)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            // Ìó§Îçî
            BacktestingMainHeader()

            Spacer(modifier = Modifier.height(16.dp))

            // ÏïàÎÇ¥ Ïπ¥Îìú
            IntroductionCard()

            Spacer(modifier = Modifier.height(16.dp))

            // Ï†ÑÎûµ Î™©Î°ù
            Text(
                "üìä Îß§Îß§ Ï†ÑÎûµ ÏÑ†ÌÉù",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )

            Spacer(modifier = Modifier.height(12.dp))

            LazyColumn(
                verticalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                items(strategies) { strategy ->
                    StrategyCard(
                        strategy = strategy,
                        onClick = { onStrategySelected(strategy) }
                    )
                }
            }
        }
    }
}

@Composable
private fun BacktestingMainHeader() {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Column {
            Text(
                "Î∞±ÌÖåÏä§ÌåÖ",
                fontSize = 24.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF1976D2)
            )
            Text(
                "Í≥ºÍ±∞ Îç∞Ïù¥ÌÑ∞Î°ú Ï†ÑÎûµ ÏÑ±Îä• ÌÖåÏä§Ìä∏",
                fontSize = 14.sp,
                color = Color.Gray
            )
        }

        Icon(
            Icons.Default.Analytics,
            contentDescription = null,
            modifier = Modifier.size(40.dp),
            tint = Color(0xFF2196F3)
        )
    }
}

@Composable
private fun IntroductionCard() {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFFFF3E0)
        )
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    Icons.Default.Info,
                    contentDescription = null,
                    tint = Color(0xFFFF9800),
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    "Î∞±ÌÖåÏä§ÌåÖÏù¥ÎûÄ?",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFFE65100)
                )
            }

            Spacer(modifier = Modifier.height(8.dp))

            Text(
                "Í≥ºÍ±∞Ïùò Ïã§Ï†ú ÏãúÏû• Îç∞Ïù¥ÌÑ∞Î•º ÏÇ¨Ïö©ÌïòÏó¨ Îß§Îß§ Ï†ÑÎûµÏùò ÏÑ±Í≥ºÎ•º ÏãúÎÆ¨Î†àÏù¥ÏÖòÌïòÎäî Î∞©Î≤ïÏûÖÎãàÎã§.\n" +
                        "Ïã§Ï†ú Ìà¨Ïûê Ï†ÑÏóê Ï†ÑÎûµÏùò ÏàòÏùµÏÑ±Í≥º ÏúÑÌóòÎèÑÎ•º ÎØ∏Î¶¨ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.",
                fontSize = 13.sp,
                color = Color(0xFFBF360C),
                lineHeight = 18.sp
            )
        }
    }
}

@Composable
private fun StrategyCard(
    strategy: TradingStrategy,
    onClick: () -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        colors = CardDefaults.cardColors(
            containerColor = Color.White
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
        onClick = onClick
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Ï†ÑÎûµ ÏïÑÏù¥ÏΩò
            Card(
                modifier = Modifier.size(60.dp),
                colors = CardDefaults.cardColors(
                    containerColor = when (strategy.id) {
                        "cci" -> Color(0xFFE3F2FD)
                        "rsi" -> Color(0xFFE8F5E8)
                        "bollinger" -> Color(0xFFF3E5F5)
                        else -> Color(0xFFF5F5F5)
                    }
                )
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        strategy.icon,
                        contentDescription = null,
                        modifier = Modifier.size(30.dp),
                        tint = when (strategy.id) {
                            "cci" -> Color(0xFF2196F3)
                            "rsi" -> Color(0xFF4CAF50)
                            "bollinger" -> Color(0xFF9C27B0)
                            else -> Color.Gray
                        }
                    )
                }
            }

            Spacer(modifier = Modifier.width(16.dp))

            // Ï†ÑÎûµ Ï†ïÎ≥¥
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    strategy.name,
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color(0xFF1976D2)
                )

                Spacer(modifier = Modifier.height(4.dp))

                Text(
                    strategy.description,
                    fontSize = 12.sp,
                    color = Color(0xFF666666),
                    lineHeight = 16.sp
                )

                Spacer(modifier = Modifier.height(8.dp))

                // Ï†ÑÎûµ Ï†ïÎ≥¥ ÌÉúÍ∑∏Îì§
                Row(
                    horizontalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    InfoChip(label = strategy.difficulty, color = Color(0xFFFF9800))
                    InfoChip(label = strategy.riskLevel, color = Color(0xFFF44336))
                    InfoChip(label = strategy.expectedReturn, color = Color(0xFF4CAF50))
                }
            }

            // ÌôîÏÇ¥Ìëú ÏïÑÏù¥ÏΩò
            Icon(
                Icons.Default.ChevronRight,
                contentDescription = "Ï†ÑÎûµ ÏÑ†ÌÉù",
                tint = Color(0xFF2196F3),
                modifier = Modifier.size(24.dp)
            )
        }
    }
}

@Composable
private fun InfoChip(label: String, color: Color) {
    Card(
        colors = CardDefaults.cardColors(
            containerColor = color.copy(alpha = 0.1f)
        )
    ) {
        Text(
            label,
            fontSize = 10.sp,
            fontWeight = FontWeight.Medium,
            color = color,
            modifier = Modifier.padding(horizontal = 6.dp, vertical = 2.dp)
        )
    }
}

// Í∞úÎ≥Ñ Ï†ÑÎûµ ÏÉÅÏÑ∏ ÌôîÎ©¥ (ÏóÖÎç∞Ïù¥Ìä∏Îêú Î≤ÑÏ†Ñ)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
private fun StrategyDetailScreen(
    modifier: Modifier,
    strategy: TradingStrategy,
    onBackClick: () -> Unit
) {
    // CCI Ï†ÑÎûµÏù∏ Í≤ΩÏö∞ Í≥†Í∏â ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
    if (strategy.id == "cci") {
        AdvancedCciStrategyScreen(onBackClick = onBackClick)
    } else {
        // Îã§Î•∏ Ï†ÑÎûµÎì§ÏùÄ Í∏∞Î≥∏ ÏûÑÏãú ÌôîÎ©¥
        Scaffold(
            topBar = {
                TopAppBar(
                    title = {
                        Text(
                            strategy.name,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    },
                    navigationIcon = {
                        IconButton(onClick = onBackClick) {
                            Icon(
                                Icons.Default.ArrowBack,
                                contentDescription = "Îí§Î°ú Í∞ÄÍ∏∞",
                                tint = Color.White
                            )
                        }
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = when (strategy.id) {
                            "rsi" -> Color(0xFF4CAF50)
                            "bollinger" -> Color(0xFF9C27B0)
                            else -> Color(0xFF2196F3)
                        }
                    )
                )
            }
        ) { paddingValues ->
            Box(
                modifier = modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(16.dp),
                contentAlignment = Alignment.Center
            ) {
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFFFF3E0)
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(32.dp),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Icon(
                            Icons.Default.Construction,
                            contentDescription = null,
                            modifier = Modifier.size(64.dp),
                            tint = Color(0xFFFF9800)
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            "${strategy.name} ÏÉÅÏÑ∏ ÌôîÎ©¥",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color(0xFFE65100),
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        Text(
                            "Í≥ß Íµ¨ÌòÑÎê† ÏòàÏ†ïÏûÖÎãàÎã§!",
                            fontSize = 14.sp,
                            color = Color(0xFFBF360C),
                            textAlign = TextAlign.Center
                        )
                        Spacer(modifier = Modifier.height(16.dp))
                        Text(
                            "ÌòÑÏû¨ Í≥†Í∏â CCI Ï†ÑÎûµÎßå ÏôÑÏ†ÑÌûà Íµ¨ÌòÑÎêòÏñ¥ ÏûàÏäµÎãàÎã§.\n" +
                                    "RSIÏôÄ Î≥ºÎ¶∞Ï†Ä Î∞¥Îìú Ï†ÑÎûµÏùÄ Í∞úÎ∞ú Ï§ëÏûÖÎãàÎã§.",
                            fontSize = 12.sp,
                            color = Color(0xFF795548),
                            textAlign = TextAlign.Center,
                            lineHeight = 16.sp
                        )
                    }
                }
            }
        }
    }
}